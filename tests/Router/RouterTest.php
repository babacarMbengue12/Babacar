<?php
/**
 * Created by PhpStorm.
 * User: Babacar Mbengue
 * Date: 02/04/2019
 * Time: 05:41
 */
namespace Tests\Router;
use Router\Exceptions\DuplicateRouteNameException;
use Router\Exceptions\RouteParameterNameException;
use Router\Exceptions\RouteParametersMissingException;
use Router\RouteCollector;
use Router\Router;
use PHPUnit\Framework\TestCase;

class RouterTest extends TestCase
{

    public function tearDown()/* The :void return type declaration that should be here would cause a BC issue */
    {
        $this->reset();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @throws DuplicateRouteNameException
     */
    public function testWithoutParams(){
        /**
         * les methodes GET
         */
        Router::get('/test','test','test');
        Router::get('/test2','test2','test2');
        Router::get('/test3','test3','test3');

        $route = Router::match('/test');
        $route2 = Router::match('/test2');
        $route3 = Router::match('/test3');

        $this->assertEquals('test2',$route2->getAction());
        $this->assertEquals('test2',$route2->getAction());

        $this->assertEquals('test3',$route3->getAction());
        $this->assertEquals('test3',$route3->getAction());

        $this->assertEquals('test',$route->getName());
        $this->assertEquals('test',$route->getAction());

        $this->assertEquals('GET',$route->getMethod());

        $_SERVER['REQUEST_METHOD'] = "POST";
        /**
         * les methodes POST
         */
        Router::post('/test','test','testPost');
        Router::post('/test2','test2','test2Post');
        Router::post('/test3','test3','test3Post');

        $route = Router::match('/test');
        $route2 = Router::match('/test2');
        $route3 = Router::match('/test3');

        $this->assertEquals('test2',$route2->getAction());
        $this->assertEquals('test2Post',$route2->getName());
        $this->assertEquals('POST',$route2->getMethod());

        $this->assertEquals('test3',$route3->getAction());
        $this->assertEquals('test3Post',$route3->getName());
        $this->assertEquals('POST',$route3->getMethod());


        $this->assertEquals('testPost',$route->getName());
        $this->assertEquals('test',$route->getAction());

        $this->assertEquals('POST',$route->getMethod());

    }

    /**
     * @throws DuplicateRouteNameException
     */
    public function testWithPrams(){
       Router::get('/home/(?page)','home','home');
       Router::get('/home/test/(page)','home','home.test');

       $route = Router::match('/home');
       $route2 = Router::match('/home/10');
       $route3 = Router::match('/home/test/200');

       $this->assertEquals('home',$route->getName());
       $this->assertEquals(null,$route->getParameters()['page']);

       $this->assertEquals('home',$route2->getName());
       $this->assertEquals(10,(int)$route2->getParameters()['page']);
        $this->assertEquals('home.test',$route3->getName());
        $this->assertEquals('200',$route3->getParameters()['page']);
    }

    public function testWithPramsFail(){

        Router::get('/home/(page<\d+>)','home','home');
        Router::get('/home/test/(page)','home','home.test');

        $route = Router::match('/home');
        $route2 = Router::match('/home/10/11');
        $route3 = Router::match('/home/test');

        $this->assertEquals([NULL,NULL,NULL],[$route,$route2,$route3]);

    }


    public function testWithPramsNameFailOnGenerateUri(){

        Router::get('/home/(page<\d+>)/(t1)/(t2)','home','home');
        Router::get('/home/test/(page)/(id)','home','home.show');
        $this->expectException(RouteParametersMissingException::class);
        Router::generateUri('home',['page'=>1,'t5'=>20,'t4'=>'3']);


    }
    public function testGenerateUri(){

        Router::get('/','home','root');
        Router::get('/home/(page<\d+>)/(?t1)/(?t2)','home','home');
        Router::get('/home/test/(page)/(?id)','home','home.show');
        Router::get('/home/test/(?page)/(id)','home','home.test');

        $this->assertEquals('/home/10/1/1',Router::generateUri('home',['page'=>10,'t1'=>1,'t2'=>1]));
        $this->assertEquals('/home/10',Router::generateUri('home',['page'=>10]));
        $this->assertEquals('/home/test/10',Router::generateUri('home.show',['page'=>10]));
        $this->assertEquals('/home/test/10/100',Router::generateUri('home.show',['page'=>10,'id'=>100]));
        $this->assertEquals('/',Router::generateUri('root'));

        $this->expectException(RouteParametersMissingException::class);
        Router::generateUri('home.test',['id'=>20]);


    }
    private function reset(){
        $_SERVER['REQUEST_METHOD'] = 'GET';
        RouteCollector::$routes = [
            'GET'=>[],
            'POST'=>[],
            'DELETE'=>[],
            'PUT'=>[],
            'PATCH'=>[],
        ];
    }


}